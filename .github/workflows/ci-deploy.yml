name: CI & Deploy

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  id-token: write

jobs:
  build-test:
    name: Build & Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Determine changed functions code (for selective deploy)
        id: diff
        run: |
          set -e
          if git rev-parse --verify HEAD^ >/dev/null 2>&1; then
            RANGE="HEAD^ HEAD"
          else
            git fetch --depth=2 origin main || true
            RANGE="origin/main...HEAD"
          fi
          if git diff --name-only $RANGE | grep '^functions/' >/dev/null 2>&1; then
            echo "functions_changed=true" >> $GITHUB_OUTPUT
          else
            echo "functions_changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Use Node.js LTS
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies (root)
        run: npm ci

      - name: Install functions deps
        run: |
          cd functions
          npm ci

      # - name: Lint
      #   run: npm run lint

      - name: Run unit/integration tests
        run: npm run test:ci

      - name: Upload coverage artifact (if present)
        if: always()
        run: |
          if [ -d coverage ]; then
            echo "Uploading coverage artifact";
            tar -czf coverage.tar.gz coverage;
          else
            echo "No coverage directory found; skipping artifact upload."; exit 0;
          fi
        shell: bash

      - name: Store coverage archive
        if: always() && hashFiles('coverage.tar.gz') != ''
        uses: actions/upload-artifact@v4
        with:
            name: coverage
            path: coverage.tar.gz
            if-no-files-found: warn

      - name: Upload coverage to codecov
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        run: |
          if [ ! -f coverage/lcov.info ]; then echo "No lcov.info found, skipping Codecov"; exit 0; fi
          if [ -z "$CODECOV_TOKEN" ]; then echo "CODECOV_TOKEN not set (public repo assumed) – attempting anonymous upload"; fi
          npx codecov -f coverage/lcov.info || echo "Codecov upload failed or anonymous mode not permitted"

      - name: Chromatic (visual regression)
        env:
          CHROMATIC_PROJECT_TOKEN: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}
        run: |
          if [ -z "$CHROMATIC_PROJECT_TOKEN" ]; then
            echo "Chromatic token not set – skipping visual regression."; exit 0;
          fi
          echo "Running Chromatic visual regression build";
          npx chromatic --project-token=$CHROMATIC_PROJECT_TOKEN --exit-once-uploaded || echo "Chromatic run failed (non-blocking)"

      - name: Build Storybook (smoke)
        uses: actions/cache@v4
        id: storybook-cache
        with:
          path: storybook-static
          key: storybook-${{ hashFiles('package-lock.json', 'src/stories/**/*.stories.*') }}
      - name: Build Storybook (smoke)
        if: steps.storybook-cache.outputs.cache-hit != 'true'
        run: npm run build-storybook
      - name: Upload Storybook (if rebuilt)
        if: steps.storybook-cache.outputs.cache-hit != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: storybook-static
          path: storybook-static

      - name: Build app
        env:
          REACT_APP_FIREBASE_API_KEY: ${{ vars.REACT_APP_FIREBASE_API_KEY }}
          REACT_APP_FIREBASE_AUTH_DOMAIN: ${{ vars.REACT_APP_FIREBASE_AUTH_DOMAIN }}
          REACT_APP_FIREBASE_PROJECT_ID: ${{ vars.REACT_APP_FIREBASE_PROJECT_ID }}
          REACT_APP_FIREBASE_STORAGE_BUCKET: ${{ vars.REACT_APP_FIREBASE_STORAGE_BUCKET }}
          REACT_APP_FIREBASE_MESSAGING_SENDER_ID: ${{ vars.REACT_APP_FIREBASE_MESSAGING_SENDER_ID }}
          REACT_APP_FIREBASE_APP_ID: ${{ vars.REACT_APP_FIREBASE_APP_ID }}
          REACT_APP_FIREBASE_DATABASE_URL: ${{ vars.REACT_APP_FIREBASE_DATABASE_URL }}
        run: npm run build

      - name: Upload production build artifact
        uses: actions/upload-artifact@v4
        with:
          name: web-build
          path: build
          if-no-files-found: error

  deploy:
    name: Firebase Deploy
    runs-on: ubuntu-latest
    needs: build-test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    env:
      FIREBASE_TOKEN: ${{ secrets.FIREBASE_DEPLOY_TOKEN }}
      FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js LTS
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: web-build
          path: build

      - name: Validate Firebase secrets
        run: |
          if [ -z "$FIREBASE_TOKEN" ]; then echo "Missing FIREBASE_DEPLOY_TOKEN secret" >&2; exit 1; fi
          if [ -z "$FIREBASE_PROJECT_ID" ]; then echo "Missing FIREBASE_PROJECT_ID secret" >&2; exit 1; fi

      - name: Install firebase-tools
        run: npm install -g firebase-tools

      - name: Decide deploy scope
        id: scope
        run: |
          set -e
          if git rev-parse --verify HEAD^ >/dev/null 2>&1; then
            RANGE="HEAD^ HEAD"
          else
            git fetch --depth=2 origin main || true
            RANGE="origin/main...HEAD"
          fi
            if git diff --name-only $RANGE | grep '^functions/' >/dev/null 2>&1; then
              echo "deploy_functions=true" >> $GITHUB_OUTPUT
            else
              echo "deploy_functions=false" >> $GITHUB_OUTPUT
            fi

      - name: Deploy Hosting only
        if: steps.scope.outputs.deploy_functions == 'false'
        run: |
          firebase deploy --only hosting --non-interactive --project $FIREBASE_PROJECT_ID --token "$FIREBASE_TOKEN"

      - name: Deploy Hosting + Functions
        if: steps.scope.outputs.deploy_functions == 'true'
        run: |
          firebase deploy --only hosting,functions --non-interactive --project $FIREBASE_PROJECT_ID --token "$FIREBASE_TOKEN"
