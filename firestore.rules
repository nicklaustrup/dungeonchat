rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users can read any profile but only write their own
    match /userProfiles/{userId} {
      allow read: if request.auth != null; // Allow authenticated users to read any profile
      allow write: if request.auth != null && request.auth.uid == userId; // Only allow writing own profile
    }
    
    // Username collection for availability checking
    // Users can read to check availability and write their own username entries
    match /usernames/{username} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
        (resource == null || resource.data.uid == request.auth.uid) &&
        request.resource.data.uid == request.auth.uid;
    }
    
    // Messages collection - users can read all messages and write their own
    match /messages/{messageId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.auth.uid == request.resource.data.uid;
      // Allow message author to update/delete their own messages
      allow update, delete: if request.auth != null && request.auth.uid == resource.data.uid;
      // Allow any authenticated user to update reactions field only
      allow update: if request.auth != null && 
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['reactions']) &&
        request.resource.data.keys().hasAll(resource.data.keys().removeAll(['reactions']));
    }
    
    // Presence collection - users can read all and write their own
    match /presence/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Campaign collection - new for campaign system
    match /campaigns/{campaignId} {
      // Helper function: Check if user is the DM
      function isDM() {
        return request.auth != null && 
          request.auth.uid == resource.data.dmId;
      }
      
      // Helper function: Check if user is a campaign member or DM
      function isMemberOrDM() {
        return request.auth != null && 
          (request.auth.uid == resource.data.dmId ||
           exists(/databases/$(database)/documents/campaigns/$(campaignId)/members/$(request.auth.uid)));
      }
      
      // Anyone can read public campaigns, members can read their campaigns
      allow read: if request.auth != null && 
        (resource.data.visibility == 'public' || 
         resource.data.dmId == request.auth.uid ||
         request.auth.uid in resource.data.get('members', []));
      
      // Only authenticated users can create campaigns (they become DM)
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.dmId;
      
      // DM can update or delete campaign
      allow update, delete: if request.auth != null && 
        request.auth.uid == resource.data.dmId;
      
      // Allow players to join public campaigns by adding themselves to members array
      // TODO: Implement request/approval system with waitlist
      allow update: if request.auth != null &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['members', 'currentPlayers', 'updatedAt']) &&
        request.auth.uid in request.resource.data.members &&
        !(request.auth.uid in resource.data.get('members', []));
        
      // Campaign members subcollection
      match /members/{userId} {
        allow read: if request.auth != null;
        allow write: if request.auth != null && 
          (request.auth.uid == userId || 
           request.auth.uid == get(/databases/$(database)/documents/campaigns/$(campaignId)).data.dmId);
      }
      
      // Campaign channels subcollection
      match /channels/{channelId} {
        allow read: if request.auth != null && 
          (request.auth.uid == get(/databases/$(database)/documents/campaigns/$(campaignId)).data.dmId ||
           exists(/databases/$(database)/documents/campaigns/$(campaignId)/members/$(request.auth.uid)));
        allow write: if request.auth != null && 
          request.auth.uid == get(/databases/$(database)/documents/campaigns/$(campaignId)).data.dmId;
          
        // Campaign channel messages
        match /messages/{messageId} {
          allow read: if request.auth != null && 
            (request.auth.uid == get(/databases/$(database)/documents/campaigns/$(campaignId)).data.dmId ||
             exists(/databases/$(database)/documents/campaigns/$(campaignId)/members/$(request.auth.uid)));
          allow create: if request.auth != null && 
            request.auth.uid == request.resource.data.uid &&
            (request.auth.uid == get(/databases/$(database)/documents/campaigns/$(campaignId)).data.dmId ||
             exists(/databases/$(database)/documents/campaigns/$(campaignId)/members/$(request.auth.uid)));
          // Allow message author to update/delete their own messages
          allow update, delete: if request.auth != null && 
            request.auth.uid == resource.data.uid &&
            (request.auth.uid == get(/databases/$(database)/documents/campaigns/$(campaignId)).data.dmId ||
             exists(/databases/$(database)/documents/campaigns/$(campaignId)/members/$(request.auth.uid)));
          // Allow any campaign member to update reactions field only
          allow update: if request.auth != null && 
            (request.auth.uid == get(/databases/$(database)/documents/campaigns/$(campaignId)).data.dmId ||
             exists(/databases/$(database)/documents/campaigns/$(campaignId)/members/$(request.auth.uid))) &&
            request.resource.data.diff(resource.data).affectedKeys().hasOnly(['reactions']) &&
            request.resource.data.keys().hasAll(resource.data.keys().removeAll(['reactions']));
        }
      }
      
      // Campaign character sheets subcollection
      match /characters/{userId} {
        // Campaign members and DM can read all character sheets in the campaign
        allow read: if request.auth != null && 
          (request.auth.uid == get(/databases/$(database)/documents/campaigns/$(campaignId)).data.dmId ||
           exists(/databases/$(database)/documents/campaigns/$(campaignId)/members/$(request.auth.uid)));
        
        // Users can create/update their own character sheet if they're a campaign member
        allow create, update: if request.auth != null && 
          request.auth.uid == userId &&
          (request.auth.uid == get(/databases/$(database)/documents/campaigns/$(campaignId)).data.dmId ||
           exists(/databases/$(database)/documents/campaigns/$(campaignId)/members/$(request.auth.uid))) &&
          request.auth.uid == request.resource.data.userId;
        
        // DM can update any character sheet in their campaign
        allow update: if request.auth != null && 
          request.auth.uid == get(/databases/$(database)/documents/campaigns/$(campaignId)).data.dmId;
        
        // Users can delete their own character sheet, DM can delete any
        allow delete: if request.auth != null && 
          (request.auth.uid == userId || 
           request.auth.uid == get(/databases/$(database)/documents/campaigns/$(campaignId)).data.dmId);
      }
      
      // Campaign session data subcollection (initiative tracker, session notes, etc.)
      match /sessions/{sessionDocId} {
        // Campaign members and DM can read all session data
        allow read: if request.auth != null && 
          (request.auth.uid == get(/databases/$(database)/documents/campaigns/$(campaignId)).data.dmId ||
           exists(/databases/$(database)/documents/campaigns/$(campaignId)/members/$(request.auth.uid)));
        
        // DM can create, update, and delete all session data
        allow create, update, delete: if request.auth != null && 
          request.auth.uid == get(/databases/$(database)/documents/campaigns/$(campaignId)).data.dmId;
        
        // Campaign members can contribute to certain session data (like adding to initiative)
        allow update: if request.auth != null && 
          (request.auth.uid == get(/databases/$(database)/documents/campaigns/$(campaignId)).data.dmId ||
           exists(/databases/$(database)/documents/campaigns/$(campaignId)/members/$(request.auth.uid))) &&
          sessionDocId == 'initiative';
        
        // For individual session notes documents:
        // - Members can read all fields
        // - DM can read/write all fields (including dmNotes)
        // - The dmNotes field should only be accessible to DM (enforced in client code)
        // Security rule already covers this through DM-only write permissions above
      }
      
      // Campaign encounters subcollection (encounter templates and active encounters)
      match /encounters/{encounterId} {
        // Campaign members and DM can read all encounters
        allow read: if request.auth != null && 
          (request.auth.uid == get(/databases/$(database)/documents/campaigns/$(campaignId)).data.dmId ||
           exists(/databases/$(database)/documents/campaigns/$(campaignId)/members/$(request.auth.uid)));
        
        // DM can create, update, and delete encounters
        allow create, update, delete: if request.auth != null && 
          request.auth.uid == get(/databases/$(database)/documents/campaigns/$(campaignId)).data.dmId;
      }
      
      // Campaign schedule subcollection (sessions, milestones, events)
      match /schedule/{eventId} {
        // Campaign members and DM can read all scheduled events
        allow read: if request.auth != null && 
          (request.auth.uid == get(/databases/$(database)/documents/campaigns/$(campaignId)).data.dmId ||
           exists(/databases/$(database)/documents/campaigns/$(campaignId)/members/$(request.auth.uid)));
        
        // DM can create, update, and delete events
        allow create, update, delete: if request.auth != null && 
          request.auth.uid == get(/databases/$(database)/documents/campaigns/$(campaignId)).data.dmId;
        
        // Campaign members can update availability field only
        allow update: if request.auth != null && 
          (request.auth.uid == get(/databases/$(database)/documents/campaigns/$(campaignId)).data.dmId ||
           exists(/databases/$(database)/documents/campaigns/$(campaignId)/members/$(request.auth.uid))) &&
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['availability']) &&
          request.resource.data.keys().hasAll(resource.data.keys().removeAll(['availability']));
      }
      
      // VTT Maps collection
      match /maps/{mapId} {
        // Campaign members and DM can read maps
        allow read: if request.auth != null && 
          (request.auth.uid == get(/databases/$(database)/documents/campaigns/$(campaignId)).data.dmId ||
           exists(/databases/$(database)/documents/campaigns/$(campaignId)/members/$(request.auth.uid)));
        
        // Only DM can create, update, and delete maps
        allow create, update, delete: if request.auth != null && 
          request.auth.uid == get(/databases/$(database)/documents/campaigns/$(campaignId)).data.dmId;

        // Shapes drawn on a map (circles, rectangles, cones, lines)
        match /shapes/{shapeId} {
          // Members and DM can see shapes
          allow read: if request.auth != null && 
            (request.auth.uid == get(/databases/$(database)/documents/campaigns/$(campaignId)).data.dmId ||
             exists(/databases/$(database)/documents/campaigns/$(campaignId)/members/$(request.auth.uid)));
          // Only DM can create/update/delete shapes
          allow create, update, delete: if request.auth != null && 
            request.auth.uid == get(/databases/$(database)/documents/campaigns/$(campaignId)).data.dmId;
        }

        // Lights collection - Dynamic lighting system
        match /lights/{lightId} {
          // Campaign members and DM can read lights
          allow read: if request.auth != null && 
            (request.auth.uid == get(/databases/$(database)/documents/campaigns/$(campaignId)).data.dmId ||
             exists(/databases/$(database)/documents/campaigns/$(campaignId)/members/$(request.auth.uid)));
          // Only DM can create/update/delete lights
          allow create, update, delete: if request.auth != null && 
            request.auth.uid == get(/databases/$(database)/documents/campaigns/$(campaignId)).data.dmId;
        }
      }

      // Ambient audio tracks for the campaign
      match /audio/{trackId} {
        // Members and DM can read the audio playlist
        allow read: if request.auth != null && 
          (request.auth.uid == get(/databases/$(database)/documents/campaigns/$(campaignId)).data.dmId ||
           exists(/databases/$(database)/documents/campaigns/$(campaignId)/members/$(request.auth.uid)));
        // Only DM manages tracks
        allow create, update, delete: if request.auth != null && 
          request.auth.uid == get(/databases/$(database)/documents/campaigns/$(campaignId)).data.dmId;
      }
      
      // VTT Map Tokens collection (legacy)
      match /mapTokens/{mapId}/tokens/{tokenId} {
        // Campaign members and DM can read tokens
        allow read: if request.auth != null && 
          (request.auth.uid == get(/databases/$(database)/documents/campaigns/$(campaignId)).data.dmId ||
           exists(/databases/$(database)/documents/campaigns/$(campaignId)/members/$(request.auth.uid)));
        
        // Only DM can create, update, and delete tokens
        allow create, update, delete: if request.auth != null && 
          request.auth.uid == get(/databases/$(database)/documents/campaigns/$(campaignId)).data.dmId;
      }
      
      // VTT collection (new structure for tokens, pings, fog of war)
      match /vtt/{mapId} {
        // Tokens subcollection
        match /tokens/{tokenId} {
          // Campaign members and DM can read tokens
          allow read: if request.auth != null && 
            (request.auth.uid == get(/databases/$(database)/documents/campaigns/$(campaignId)).data.dmId ||
             exists(/databases/$(database)/documents/campaigns/$(campaignId)/members/$(request.auth.uid)));
          
          // Only DM can create, update, and delete tokens
          allow create, update, delete: if request.auth != null && 
            request.auth.uid == get(/databases/$(database)/documents/campaigns/$(campaignId)).data.dmId;
        }
        
        // Pings subcollection (temporary map markers)
        match /pings/{pingId} {
          // Campaign members and DM can read pings
          allow read: if request.auth != null && 
            (request.auth.uid == get(/databases/$(database)/documents/campaigns/$(campaignId)).data.dmId ||
             exists(/databases/$(database)/documents/campaigns/$(campaignId)/members/$(request.auth.uid)));
          
          // Campaign members can create and delete their own pings
          allow create: if request.auth != null && 
            request.auth.uid == request.resource.data.userId &&
            (request.auth.uid == get(/databases/$(database)/documents/campaigns/$(campaignId)).data.dmId ||
             exists(/databases/$(database)/documents/campaigns/$(campaignId)/members/$(request.auth.uid)));
          
          allow delete: if request.auth != null && 
            (request.auth.uid == resource.data.userId || 
             request.auth.uid == get(/databases/$(database)/documents/campaigns/$(campaignId)).data.dmId);
        }
        
        // Fog of war subcollection
        match /fog/{fogDocId} {
          // Campaign members and DM can read fog of war
          allow read: if request.auth != null && 
            (request.auth.uid == get(/databases/$(database)/documents/campaigns/$(campaignId)).data.dmId ||
             exists(/databases/$(database)/documents/campaigns/$(campaignId)/members/$(request.auth.uid)));
          
          // DM can create and delete fog of war
          allow create, delete: if request.auth != null && 
            request.auth.uid == get(/databases/$(database)/documents/campaigns/$(campaignId)).data.dmId;
          
          // Campaign members and DM can update fog (for auto-reveal when moving tokens)
          allow update: if request.auth != null && 
            (request.auth.uid == get(/databases/$(database)/documents/campaigns/$(campaignId)).data.dmId ||
             exists(/databases/$(database)/documents/campaigns/$(campaignId)/members/$(request.auth.uid)));
        }
        
        // Drawings subcollection (pen strokes and arrows)
        match /drawings/{drawingId} {
          // Campaign members and DM can read drawings
          allow read: if request.auth != null && 
            (request.auth.uid == get(/databases/$(database)/documents/campaigns/$(campaignId)).data.dmId ||
             exists(/databases/$(database)/documents/campaigns/$(campaignId)/members/$(request.auth.uid)));
          
          // Campaign members can create and delete their own drawings
          allow create: if request.auth != null && 
            request.auth.uid == request.resource.data.createdBy &&
            (request.auth.uid == get(/databases/$(database)/documents/campaigns/$(campaignId)).data.dmId ||
             exists(/databases/$(database)/documents/campaigns/$(campaignId)/members/$(request.auth.uid)));
          
          allow delete: if request.auth != null && 
            (request.auth.uid == resource.data.createdBy || 
             request.auth.uid == get(/databases/$(database)/documents/campaigns/$(campaignId)).data.dmId);
        }
      }
      
      // Voice rooms within campaigns
      match /voiceRooms/{roomId} {
        // Helper function to check if user is campaign member
        function isCampaignMember() {
          return request.auth != null && 
            exists(/databases/$(database)/documents/campaigns/$(campaignId)/members/$(request.auth.uid));
        }
        
        // Helper function for demo campaigns
        function isDemoCampaign() {
          return campaignId.matches('test-campaign-.*');
        }
        
        // Campaign members can read voice rooms
        allow read: if request.auth != null && 
          (isDemoCampaign() || isCampaignMember());
        
        // Campaign members can create voice rooms (not just DM)
        allow create: if request.auth != null && 
          (isDemoCampaign() || isCampaignMember());
        
        // Campaign members can update voice rooms (for joining/leaving)
        allow update: if request.auth != null && 
          (isDemoCampaign() || isCampaignMember());
        
        // DM and room creator can delete voice rooms
        allow delete: if request.auth != null && 
          (isDemoCampaign() || 
           request.auth.uid == get(/databases/$(database)/documents/campaigns/$(campaignId)).data.dmId ||
           request.auth.uid == resource.data.createdBy);
        
        // Voice room participants
        match /participants/{userId} {
          // Helper function to check if user is campaign member
          function isCampaignMember() {
            return request.auth != null && 
              exists(/databases/$(database)/documents/campaigns/$(campaignId)/members/$(request.auth.uid));
          }
          
          // Helper function for demo campaigns
          function isDemoCampaign() {
            return campaignId.matches('test-campaign-.*');
          }
          
          // Campaign members can read participants
          allow read: if request.auth != null && 
            (isDemoCampaign() || isCampaignMember());
          
          // Campaign members can add themselves as participants
          allow create: if request.auth != null && 
            request.auth.uid == userId && 
            (isDemoCampaign() || isCampaignMember());
          
          // Users can update their own participant data
          allow update: if request.auth != null && 
            request.auth.uid == userId;
          
          // Users can remove themselves, DM can remove anyone
          allow delete: if request.auth != null && 
            (request.auth.uid == userId || 
             isDemoCampaign() ||
             request.auth.uid == get(/databases/$(database)/documents/campaigns/$(campaignId)).data.dmId);
        }
        
        // Recordings (DM only)
        match /recordings/{recordingId} {
          allow read: if request.auth != null && 
            exists(/databases/$(database)/documents/campaigns/$(campaignId)/members/$(request.auth.uid));
          allow write: if request.auth != null && 
            request.auth.uid == get(/databases/$(database)/documents/campaigns/$(campaignId)).data.dmId;
        }
      }
    }
    
    // User campaigns tracking
    match /userCampaigns/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Deny all other reads/writes
    match /{document=**} {
      allow read, write: if false;
    }
  }
}